{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \"Please enter Email Id \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵtext(2, \"You can use letters, numbers, periods and underscore\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \"Please enter valid Password \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵtext(2, \"Use 8 or more characters with a mix of letters, numbers & symbols ;)\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    cursor: a0\n  };\n};\nexport class RegisterComponent {\n  constructor(fb, router, http) {\n    this.fb = fb;\n    this.router = router;\n    this.http = http;\n    this.togglePassword = 'visibility';\n    this.disabledPassword = true;\n    this.typePassword = 'password';\n  }\n  ngOnInit() {\n    this.builderForm();\n  }\n  builderForm() {\n    this.registerForm = this.fb.group({\n      email: ['', [Validators.required]],\n      password: ['', [Validators.required]]\n    });\n  }\n  get email() {\n    return this.registerForm.get('email');\n  }\n  get password() {\n    return this.registerForm.get('password');\n  }\n  onLoginClick() {\n    this.router.navigate(['/login']);\n  }\n  onRegisterClick() {\n    this.http.post('http://localhost:3000/user/signIn/', this.registerForm.value).subscribe(res => {\n      console.log('Hello', res);\n      this.router.navigate(['/login']);\n    }, err => {\n      console.log('Error in Registering..');\n    });\n  }\n  toggle() {\n    if (this.disabledPassword === true) {\n      this.disabledPassword = false;\n      this.togglePassword = 'visibility_off';\n      this.typePassword = 'text';\n    } else {\n      this.disabledPassword = true;\n      this.togglePassword = 'visibility';\n      this.typePassword = 'password';\n    }\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.HttpClient));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 30,\n  vars: 15,\n  consts: [[\"href\", \"https://fonts.googleapis.com/icon?family=Material+Icons\", \"rel\", \"stylesheet\"], [1, \"row\", \"mx-4\", \"my-4\", \"justify-content-center\"], [1, \"col-lg-6\", \"col-md-12\", \"col-sm-12\", \"colnm\", \"shadow\", \"p-3\"], [1, \"colum\", 3, \"formGroup\"], [1, \"form-group\"], [\"for\", \"exampleInputPassword1\", 1, \"alert-link\", \"control-label\"], [\"required\", \"\", \"formControlName\", \"email\", \"type\", \"email\", \"name\", \"Email\", \"pattern\", \"^([a-zA-Z0-9_\\\\-\\\\.]+)@([a-zA-Z0-9_\\\\-\\\\.]+)\\\\.([a-zA-Z]{2,5})$\", 1, \"form-control\"], [\"class\", \"help-block text-danger\", 4, \"ngIf\"], [1, \"input-group\"], [\"required\", \"\", \"data-toggle\", \"password\", \"formControlName\", \"password\", \"name\", \"Password\", \"pattern\", \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*]).{8,}\", 1, \"form-control\", 3, \"type\"], [1, \"input-group-append\"], [1, \"input-group-text\", \"bg-white\", \"inpgrpapp\"], [1, \"material-icons\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\", \"btn-group-lg\", \"mt-4\", 3, \"disabled\", \"ngStyle\", \"click\"], [1, \"form-group\", \"float-right\", \"mt-3\"], [3, \"click\"], [1, \"login\"], [1, \"help-block\", \"text-danger\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"link\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"form\", 3)(4, \"h2\");\n      i0.ɵɵtext(5, \"Register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 4)(7, \"label\", 5);\n      i0.ɵɵtext(8, \"Email Id: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 6);\n      i0.ɵɵtemplate(10, RegisterComponent_div_10_Template, 2, 0, \"div\", 7);\n      i0.ɵɵtemplate(11, RegisterComponent_div_11_Template, 3, 0, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 4)(13, \"label\", 5);\n      i0.ɵɵtext(14, \"Password: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 8);\n      i0.ɵɵelement(16, \"input\", 9);\n      i0.ɵɵelementStart(17, \"div\", 10)(18, \"div\", 11)(19, \"span\", 12);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_span_click_19_listener() {\n        return ctx.toggle();\n      });\n      i0.ɵɵtext(20);\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵtemplate(21, RegisterComponent_div_21_Template, 2, 0, \"div\", 7);\n      i0.ɵɵtemplate(22, RegisterComponent_div_22_Template, 3, 0, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"button\", 13);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_23_listener() {\n        return ctx.onRegisterClick();\n      });\n      i0.ɵɵtext(24, \"Register \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"div\", 14)(26, \"a\", 15);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_a_click_26_listener() {\n        return ctx.onLoginClick();\n      });\n      i0.ɵɵtext(27, \"Already Register? \");\n      i0.ɵɵelementStart(28, \"span\", 16);\n      i0.ɵɵtext(29, \"Login\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵclassProp(\"is-invalid\", ctx.registerForm.get(\"email\").invalid && ctx.registerForm.get(\"email\").touched);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.email.invalid && (ctx.email.dirty || ctx.email.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.email.errors == null ? null : ctx.email.errors.pattern);\n      i0.ɵɵadvance(5);\n      i0.ɵɵclassProp(\"is-invalid\", ctx.registerForm.get(\"password\").invalid && ctx.registerForm.get(\"password\").touched);\n      i0.ɵɵpropertyInterpolate(\"type\", ctx.typePassword);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate1(\" \", ctx.togglePassword, \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.password.errors && (ctx.password.dirty || ctx.password.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.password.errors == null ? null : ctx.password.errors.pattern);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid)(\"ngStyle\", i0.ɵɵpureFunction1(13, _c0, ctx.registerForm.invalid ? \"no-drop\" : \"pointer\"));\n    }\n  },\n  dependencies: [i4.NgIf, i4.NgStyle, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.PatternValidator, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","RegisterComponent","constructor","fb","router","http","ngOnInit","builderForm","registerForm","group","email","required","password","get","onLoginClick","navigate","onRegisterClick","post","value","subscribe","res","console","log","err","toggle","disabledPassword","togglePassword","typePassword","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/shamshadhusain/student-portal-app/student-frontend-app/src/app/register/register.component.ts","/Users/shamshadhusain/student-portal-app/student-frontend-app/src/app/register/register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { ThrowStmt } from '@angular/compiler';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n\n  togglePassword = 'visibility';\n  disabledPassword = true;\n  typePassword = 'password';\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private http: HttpClient\n  ) {}\n\n  ngOnInit() {\n    this.builderForm();\n  }\n\n  builderForm() {\n    this.registerForm = this.fb.group({\n      email: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  get email() {\n    return this.registerForm.get('email');\n  }\n\n  get password() {\n    return this.registerForm.get('password');\n  }\n\n  onLoginClick() {\n    this.router.navigate(['/login']);\n  }\n\n  onRegisterClick() {\n    this.http.post('http://localhost:3000/user/signIn/', this.registerForm.value).subscribe((res: any) => {\n      console.log('Hello', res);\n      this.router.navigate(['/login']);\n    }, err => {\n        console.log('Error in Registering..');\n    });\n  }\n\n  toggle() {\n    if (this.disabledPassword === true) {\n      this.disabledPassword = false;\n      this.togglePassword = 'visibility_off';\n      this.typePassword = 'text';\n    } else {\n      this.disabledPassword = true;\n      this.togglePassword = 'visibility';\n      this.typePassword = 'password';\n    }\n  }\n}\n","<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n<div class=\"row mx-4 my-4 justify-content-center\">\n  <div class=\"col-lg-6 col-md-12 col-sm-12 colnm shadow p-3\">\n    <form class=\"formGroup\" [formGroup]=\"registerForm\" class=\"colum\">\n\n      <h2>Register</h2>\n      <!-- Email ID -->\n      <div class=\"form-group\">\n        <label class=\"alert-link control-label\" for=\"exampleInputPassword1\">Email Id: </label>\n        <input required [class.is-invalid]=\"registerForm.get('email').invalid && registerForm.get('email').touched\"\n          formControlName=\"email\" type=\"email\" class=\"form-control\" name=\"Email\"\n          pattern=\"^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$\">\n\n        <div class=\"help-block text-danger\" *ngIf=\"email.invalid && (email.dirty || email.touched)\">Please enter Email\n          Id\n        </div>\n        <div class=\"help-block text-danger\" *ngIf=\"email.errors?.pattern\"><br>You can use letters, numbers, periods and\n          underscore</div>\n      </div>\n      <!-- Email ID -->\n\n      <!-- Password -->\n      <div class=\"form-group\">\n        <label class=\"alert-link control-label\" for=\"exampleInputPassword1\">Password: </label>\n        <div class=\"input-group\">\n          <input required [class.is-invalid]=\"registerForm.get('password').invalid && registerForm.get('password').touched\"\n            data-toggle=\"password\" formControlName=\"password\" type=\"{{typePassword}}\" class=\"form-control\"\n            name=\"Password\" pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*]).{8,}\">\n          <div class=\"input-group-append\">\n            <div class=\"input-group-text bg-white inpgrpapp\"><span class=\"material-icons\" (click)=\"toggle()\">\n                {{togglePassword}}\n              </span></div>\n          </div>\n        </div>\n        <div class=\"help-block text-danger\" *ngIf=\"password.errors && (password.dirty || password.touched)\">Please enter\n          valid\n          Password\n        </div>\n        <div class=\"help-block text-danger\" *ngIf=\"password.errors?.pattern\"><br>Use 8 or more characters with a mix of\n          letters,\n          numbers & symbols ;)</div>\n      </div>\n      <!-- Password -->\n\n      <!-- Register Button -->\n      <button [disabled]=\"registerForm.invalid\" type=\"submit\" [ngStyle]=\"{cursor: registerForm.invalid? 'no-drop': 'pointer'}\"\n        class=\"btn btn-primary btn-block btn-group-lg mt-4 \" (click)=\"onRegisterClick()\">Register </button>\n      <!-- Register Button -->\n      <div class=\"form-group float-right mt-3\">\n        <a (click)=\"onLoginClick()\">Already Register? <span class=\"login\">Login</span>\n        </a>\n      </div>\n\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}